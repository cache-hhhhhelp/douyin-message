// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package message

import (
	"context"

	"douyin-message/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActionRequest      = __.ActionRequest
	ActionResponse     = __.ActionResponse
	ActionResponseData = __.ActionResponseData
	BaseResp           = __.BaseResp
	ChatRequest        = __.ChatRequest
	ChatResponse       = __.ChatResponse
	ChatResponseData   = __.ChatResponseData

	Message interface {
		Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
		Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	client := __.NewMessageClient(m.cli.Conn())
	return client.Chat(ctx, in, opts...)
}

func (m *defaultMessage) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	client := __.NewMessageClient(m.cli.Conn())
	return client.Action(ctx, in, opts...)
}
